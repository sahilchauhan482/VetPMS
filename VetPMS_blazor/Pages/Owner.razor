@page "/owners"
@attribute [Authorize(Roles = $"{Roles.Admin},{Roles.Clinic}")]
@inject OwnerService ownerService
@inject Blazored.Toast.Services.IToastService toastService
@inject IJSRuntime js
@inject DialogService dialogService
@inject NavigationManager Navigation

<EditForm Model="newOwner" OnValidSubmit="HandleOwnerSubmit" class="@(isFormVisible ? "form-container open" : "form-container closed")">
    <FluentValidationValidator />

    <div class="rounded border p-2 m-0 row align-items-center" style="background-color:lightgrey">
        <div class="col-6 text-black">
            <RadzenLabel Text="Add New Owner" Component="h2" />
        </div>
        <div class="col-6 d-flex justify-content-end">
            <RadzenButton Icon="close" class="btn" ButtonStyle="ButtonStyle.Danger" Click="CloseDialog" Style="margin-right: 10px;"> </RadzenButton>
            <RadzenButton Icon="save" class="btn" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Disabled="@(isSubmitting || isSaveButtonDisabled)">
            </RadzenButton>
        </div>
    </div>

    <div class="col-12 form-group row justify-content-center mt-3 ml-0">
        <div class="row">
            <div class="col-4">
                <RadzenLabel Text="Owner Name" />
                <RadzenTextBox @bind-Value="newOwner.Name" class="form-control invalid rz-state-empty" />
                <ValidationMessage For="@(() => newOwner.Name)" />
            </div>

            <div class="col-4">
                <RadzenLabel Text="Address" />
                <RadzenTextBox @bind-Value="newOwner.Address" class="form-control invalid rz-state-empty" />
                <ValidationMessage For="@(() => newOwner.Address)" />
            </div>

            <div class="col-4">
                <RadzenLabel Text="Phone Number" />
                <RadzenTextBox @bind-Value="newOwner.PhoneNumber" class="form-control invalid rz-state-empty" Id="phone" @oninput="CheckPhoneNumberDuplicate" />
                <div class="text-danger">@phoneErrorMessage</div>
                <ValidationMessage For="@(() => newOwner.PhoneNumber)" />
            </div>
        </div>
    </div>

    <div class="col-12 form-group row justify-content-center mt-3 ml-0">
        <div class="row">
            <div class="col-4">
                <RadzenLabel Text="Email" />
                <RadzenTextBox @bind-Value="newOwner.Email" class="form-control invalid rz-state-empty" @oninput="CheckEmailDuplicate" />
                <div class="text-danger">@emailErrorMessage</div>
                <ValidationMessage For="@(() => newOwner.Email)" />
            </div>
        </div>
    </div>
</EditForm>

<hr />

<div class="rounded border p-2 mb-2 row align-items-center" style="background-color:lightgrey">
    <div class="col-8 text-black">
        <RadzenLabel Text="Owners List" Component="h2" />
    </div>
    <div class="col-4 d-flex justify-content-end">
        <RadzenButton Text="Add" Icon="add" ButtonStyle="ButtonStyle.Primary" Click="ToggleFormVisibility" />
    </div>
</div>

<RadzenDataGrid TItem="OwnerDTO" Data="@ownersList" ColumnWidth="auto" AllowFiltering="true" AllowPaging="true" AllowSorting="true" PageSize="6"
                class="scrollable-grid" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Responsive="true" Style="width: 100%;"
                GridLines="DataGridGridLines.Both" Density="Density.Compact">
    <Columns>
        <RadzenDataGridColumn TItem="OwnerDTO" Property="Name" Title="Name" />
        <RadzenDataGridColumn TItem="OwnerDTO" Property="Address" Title="Address" />
        <RadzenDataGridColumn TItem="OwnerDTO" Property="PhoneNumber" Title="Phone Number" />
        <RadzenDataGridColumn TItem="OwnerDTO" Property="Email" Title="Email" />
        <RadzenDataGridColumn Title="Actions">
            <Template Context="item">
                <div class="text-center">
                    <RadzenButton Icon="edit" Click="@(async () => Navigation.NavigateTo($"/owner/update/{item.Id}"))" Style="margin-right: 10px;" ButtonStyle="ButtonStyle.Info" />
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="(() => DeleteOwner(item.Id))" />
                </div>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private OwnerDTO newOwner = new OwnerDTO();
    private List<OwnerDTO>? ownersList;
    private string? emailErrorMessage;
    private string? phoneErrorMessage;
    private bool isSubmitting = false;
    private bool isLoading = false;
    private bool isFormVisible = false;
    private bool isSaveButtonDisabled = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        ownersList = await ownerService.GetAllOwners();
        isLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await js.InvokeVoidAsync("addEventListenersToPhoneInput");
        }
    }

    private async Task CheckEmailDuplicate(ChangeEventArgs e)
    {
        var email = e.Value!.ToString();
        bool existEmail = await ownerService.CheckEmailExistsAsync(email!);
        if (existEmail)
        {
            emailErrorMessage = "Email already exists";
            isSaveButtonDisabled = true;
        }
        else
        {
            emailErrorMessage = string.Empty;
            isSaveButtonDisabled = false;
        }
        StateHasChanged();
    }

    private async Task CheckPhoneNumberDuplicate(ChangeEventArgs e)
    {
        var phoneNumber = e.Value!.ToString();
        bool existPhone = await ownerService.CheckPhoneNumberExistsAsync(phoneNumber!);

        if (existPhone)
        {
            phoneErrorMessage = "Phone number already exists";
            isSaveButtonDisabled = true;
        }
        else
        {
            phoneErrorMessage = string.Empty;
            isSaveButtonDisabled = false;
        }
        StateHasChanged();
    }

    private async Task HandleOwnerSubmit()
    {
        try
        {
            isSubmitting = true;
            await ownerService.AddOwner(newOwner);
            toastService.ShowSuccess("Owner registered successfully!");

            newOwner = new OwnerDTO();
            ownersList = await ownerService.GetAllOwners();
            isFormVisible = false;
        }
        catch (Exception ex)
        {
            toastService.ShowError("Registration failed: " + ex.Message);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void ToggleFormVisibility()
    {
        isFormVisible = !isFormVisible;
    }

    private void CloseDialog()
    {
        isFormVisible = false;
    }

    private async Task DeleteOwner(int id)
    {
        var ownerToDelete = ownersList!.FirstOrDefault(o => o.Id == id);
        if (ownerToDelete != null)
        {
            var confirmed = await dialogService.Confirm("Are you sure you want to delete this Owner?", "Confirm Delete");
            if (confirmed == true)
            {
                await ownerService.DeleteOwner(id);
                ownersList = await ownerService.GetAllOwners();
            }
        }
    }


}

