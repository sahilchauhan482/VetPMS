@page "/medicines"
@attribute [Authorize(Roles = $"{Roles.Admin},{Roles.Clinic}")]
@inject MedicineService medicineService
@inject Blazored.Toast.Services.IToastService toastService
@inject NavigationManager navigation
@inject IJSRuntime js
@inject DialogService dialogService


<div class="@(isFormVisible ? "form-container open" : "form-container closed")">
    <EditForm Model="newMedicine" OnValidSubmit="HandleMedicineSubmit" class="@(isFormVisible ? "form-container open" : "form-container closed")">
        <FluentValidationValidator />

        <div class="rounded border p-2 m-0 row align-items-center" style="background-color:lightgrey">
            <div class="col-6 text-black">
                <RadzenLabel Text="Add New Medicine" Component="h2" />
            </div>
            <div class="col-6 d-flex justify-content-end">
                <RadzenButton Icon="close" class="btn" ButtonStyle="ButtonStyle.Danger" Style="margin-right: 10px;" Click="CloseDialog" />
                <RadzenButton Icon="save" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Disabled="@(isSubmitting || isSaveButtonDisabled)">
                </RadzenButton>
            </div>
        </div>

        <div class="col-12 form-group row justify-content-center mt-3 ml-0">
            <div class="row">
                <div class="col-4">
                    <RadzenLabel Text="Medicine Name" />
                    <RadzenTextBox @bind-Value="newMedicine.Name" class="form-control" />
                    <ValidationMessage For="@(() => newMedicine.Name)" />
                </div>
                <div class="col-4">
                    <RadzenLabel Text="Brand" />
                    <RadzenTextBox @bind-Value="newMedicine.Brand" class="form-control" />
                    <ValidationMessage For="@(() => newMedicine.Brand)" />
                </div>
                <div class="col-4">
                    <RadzenLabel Text="Description" />
                    <RadzenTextBox @bind-Value="newMedicine.Description" class="form-control" />
                    <ValidationMessage For="@(() => newMedicine.Description)" />
                </div>
            </div>
        </div>

        <div class="col-12 form-group row justify-content-center mt-3 ml-0">
            <div class="row">
                <div class="col-4">
                    <RadzenLabel Text="Medicine Type" />
                    <RadzenTextBox @bind-Value="newMedicine.MedicineType" class="form-control" />
                    <ValidationMessage For="@(() => newMedicine.MedicineType)" />
                </div>
                <div class="col-4">
                    <RadzenLabel Text="Price" />
                    <RadzenNumeric @bind-Value="newMedicine.Price" class="form-control" />
                    <ValidationMessage For="@(() => newMedicine.Price)" />
                </div>
                <div class="col-4">
                    <RadzenLabel Text="Unit" />
                    <RadzenTextBox @bind-Value="newMedicine.Unit" class="form-control" />
                    <ValidationMessage For="@(() => newMedicine.Unit)" />
                </div>
            </div>
        </div>

        <div class="col-12 form-group row justify-content-center mt-3 ml-0">
            <div class="row">
                <div class="col-4">
                    <RadzenLabel Text="Quantity" />
                    <RadzenNumeric @bind-Value="newMedicine.Quantity" class="form-control" />
                    <ValidationMessage For="@(() => newMedicine.Quantity)" />
                </div>
                <div class="col-4">
                    <RadzenLabel Text="Manufacturer" />
                    <RadzenTextBox @bind-Value="newMedicine.Manufacturer" class="form-control" />
                    <ValidationMessage For="@(() => newMedicine.Manufacturer)" />
                </div>
                <div class="col-4">
                    <RadzenLabel Text="Supplier Name" />
                    <RadzenTextBox @bind-Value="newMedicine.SupplierName" class="form-control" />
                    <ValidationMessage For="@(() => newMedicine.SupplierName)" />
                </div>
            </div>
        </div>

        <div class="col-12 form-group row justify-content-center mt-3 ml-0">
            <div class="row">
                <div class="col-4">
                    <RadzenLabel Text="Manufacturing Date" />
                    <RadzenDatePicker @bind-Value="newMedicine.ManufacturingDate"  />
                    <ValidationMessage For="@(() => newMedicine.ManufacturingDate)" />
                </div>
                <div class="col-4">
                    <RadzenLabel Text="Expiry Date" />
                    <RadzenDatePicker @bind-Value="newMedicine.ExpiryDate"  />
                    <ValidationMessage For="@(() => newMedicine.ExpiryDate)" />
                </div>
            </div>
        </div>
    </EditForm>

    
    <div class="col-12 form-group row justify-content-center mt-3">
        <div class="col-12 text-center">
            <h2 style="margin: 20px 0; font-weight: bold;">OR</h2>
        </div>
        <div class="col-12 text-center">
            <RadzenButton Icon="file_upload" class="btn" Click="ToggleImportVisibility" ButtonStyle="ButtonStyle.Info">
                <span>Import Medicines from Excel</span>
            </RadzenButton>
        </div>
    </div>
</div>

<!-- Import Medicines Section (Toggle Visibility) -->
@if (isImportVisible)
{
    <div class="form-group row justify-content-center mt-3">
        <div class="col-8 text-center border rounded p-4" style="background-color:lightgrey;">
            <RadzenLabel Text="Import Medicines from Excel" Style="font-size: 18px; font-weight: bold;" />
            <div class="mt-3 d-flex justify-content-center">
                <InputFile id="fileUpload" OnChange="HandleFileSelected" class="form-control me-3" style="display: inline-block; width: auto;" />
                <RadzenButton Text="Upload" Click="ImportMedicines" ButtonStyle="ButtonStyle.Primary" />
            </div>
            @if (isProcessing)
            {
                <div class="spinner-border text-primary mt-3" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            }
            <div class="text-danger">@validationErrors</div>
        </div>
    </div>
}

<hr />

<div class="rounded border p-2 mb-2 row" style="background-color:lightgrey">
    <div class="col-8 text-black">
        <h2 class="m-0">Medicines List</h2>
    </div>
    <div class="col-4 d-flex justify-content-end">
        <RadzenButton Text="Add" Icon="add" ButtonStyle="ButtonStyle.Primary" Click="ToggleFormVisibility" />
    </div>
</div>

<RadzenDataGrid TItem="MedicineDTO" Data="@medicinesList" AllowFiltering="true" AllowPaging="true" AllowSorting="true" ColumnWidth="200px" PageSize="6"
                Responsive="true" Style="width: 100%" AllowColumnResize="true" class="scrollable-grid" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                GridLines="DataGridGridLines.Both" Density="Density.Compact">
    <Columns>
        <RadzenDataGridColumn TItem="MedicineDTO" Property="Name" Title="Name" Frozen="true" />
        <RadzenDataGridColumn TItem="MedicineDTO" Property="Brand" Title="Brand" />
        <RadzenDataGridColumn TItem="MedicineDTO" Property="Description" Title="Description" />
        <RadzenDataGridColumn TItem="MedicineDTO" Property="MedicineType" Title="Medicine Type" />
        <RadzenDataGridColumn TItem="MedicineDTO" Property="Price" Title="Price" />
        <RadzenDataGridColumn TItem="MedicineDTO" Property="Unit" Title="Unit" />
        <RadzenDataGridColumn TItem="MedicineDTO" Property="Quantity" Title="Quantity" />
        <RadzenDataGridColumn TItem="MedicineDTO" Property="Manufacturer" Title="Manufacturer" />
        <RadzenDataGridColumn TItem="MedicineDTO" Property="SupplierName" Title="Supplier Name" />
        <RadzenDataGridColumn TItem="MedicineDTO" Property="ManufacturingDate" Title="Manufacturing Date" />
        <RadzenDataGridColumn TItem="MedicineDTO" Property="ExpiryDate" Title="Expiry Date" />
        <RadzenDataGridColumn Title="Actions">
            <Template Context="item">
                <div class="text-center">
                    <RadzenButton Icon="edit" Click="@(async () => navigation.NavigateTo($"/medicine/update/{item.MedicineId}"))" ButtonStyle="ButtonStyle.Info" />
                    <RadzenButton Icon="delete" Click="@(async () => await DeleteMedicine(item.MedicineId))" ButtonStyle="ButtonStyle.Danger" />
                </div>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private MedicineDTO newMedicine = new MedicineDTO();
    private List<MedicineDTO>? medicinesList;
    private bool isSubmitting = false;
    private bool isFormVisible = false;
    private bool isImportVisible = false;
    private bool isSaveButtonDisabled = false;
    private IBrowserFile? selectedFile;
    private string validationErrors = "";
    private bool isProcessing = false;


    protected override async Task OnInitializedAsync()
    {
        medicinesList = await medicineService.GetAllMedicines();
    }

    private async Task HandleMedicineSubmit()
    {
        try
        {
            isSubmitting = true;
            await medicineService.AddMedicine(newMedicine);
            toastService.ShowSuccess("Medicine registered successfully!");

            newMedicine = new MedicineDTO();
            medicinesList = await medicineService.GetAllMedicines();
            isFormVisible = false; 
        }
        catch (Exception ex)
        {
            toastService.ShowError("Registration failed: " + ex.Message);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void ToggleFormVisibility()
    {
        isFormVisible = !isFormVisible;
        if (isImportVisible)
        {
            isImportVisible = !isImportVisible;
        }
    }

    private void ToggleImportVisibility()
    {
        isImportVisible = !isImportVisible;
    }

    private void CloseDialog()
    {
        isFormVisible = false;
        isImportVisible = false;
    }

    private async Task DeleteMedicine(int id)
    {
        var medicineToDelete = medicinesList!.FirstOrDefault(o => o.MedicineId == id);
        if (medicineToDelete != null)
        {

            var confirmed = await dialogService.Confirm("Are you sure you want to delete this Medicine ?", "Confirm Delete");
            if (confirmed == true)
            {
                await medicineService.DeleteMedicine(id);
                medicinesList = await medicineService.GetAllMedicines();
            }
        }
    }


    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task ImportMedicines()
    {
        if (selectedFile == null)
        {
            validationErrors="File must be selected.";
            return;
        }
        else

            validationErrors = "";
        var allowedMimeType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        var allowedExtensions = new[] { ".xlsx" };

        var fileExtension = Path.GetExtension(selectedFile.Name).ToLowerInvariant();
        if (fileExtension != ".xlsx" || selectedFile.ContentType != allowedMimeType)
        {
            validationErrors = "Only .xlsx files are supported.";
            return;
        }

       
        try
        {
            isProcessing = true;
            using (var stream = selectedFile.OpenReadStream())
            {
                var result = await medicineService.ImportMedicine(selectedFile);
                toastService.ShowSuccess("File imported successfully!");
                StateHasChanged();
            }
        }
        catch (ApplicationException ex)
        {
            toastService.ShowError("Import failed: " + ex.Message);
        }
        finally
        {
            isProcessing = false;
        }

    }
}
