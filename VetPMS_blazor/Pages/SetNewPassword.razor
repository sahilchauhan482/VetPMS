@page "/set-new-password"

@layout SetNewPasswordLayout
@inject SetNewPasswordService newPassword
@inject NavigationManager navigation
@inject IToastService toastService


<h3 class="text-center border-bottom p-2 m-2" style="color:darkturquoise">Create New Password</h3>

<EditForm Model="createPassword" OnValidSubmit="NewPasswordHandler">
    <FluentValidationValidator />
    <div class="col-12 mt-5 d-flex justify-content-center">
        <div class="col-3">
            <label for="username">UserName</label>
            <InputText class="form-control" placeholder="Enter UserName" @bind-Value="createPassword.UserName"></InputText>
            <ValidationMessage For="@(() => createPassword.UserName)" />
        </div>

    </div>
    <div class="col-12 mt-4 d-flex justify-content-center">
        <div class="col-3">
            <label for="password">New Password</label>
             
            <div class="position-relative">
                <input type="@passwordInputType" placeholder="Enter Password" class="form-control" @bind="createPassword.NewPassword" id="password" />
                <span class="input-icon" @onclick="TogglePasswordVisibility">
                    <i class="@eyeIcon"></i>
                </span>
            </div>
            <ValidationMessage For="@(() => createPassword.NewPassword)" />
        </div>

    </div>
    <div class="col-6 offset-4 d-flex justify-content-center">
        <button type="submit" class="btn btn-secondary mt-4" disabled="@isSubmitting" style="background-color:darkturquoise">
            @if (isSubmitting)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true">
                    <span>&nbsp; Saving..</span>
                </span>
            }
            else
            {
                <span><i class="fas fa-save"></i>&nbsp; Save</span>
            }
        </button>
    </div>
    @*    <div class="col-12 mt-4 d-flex justify-content-center">
    <div class="text-success justify-content-center">@successMessage</div>
    <div class="text-danger justify-content-center">@errorMessage</div>
    </div> *@

</EditForm>

@code {
    private SetNewPasswordModel createPassword = new SetNewPasswordModel();

    private bool isSubmitting = false;
    private string passwordInputType = "password";
    private string eyeIcon = "fas fa-eye";

    protected override void OnInitialized()
    {
        var uri = navigation.ToAbsoluteUri(navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var token))
        {
            var decodedToken = Uri.UnescapeDataString(token);
            createPassword.Token = decodedToken;
        }
    }

    private async Task NewPasswordHandler()
    {
        try
        {
            isSubmitting = true;
            var result = await newPassword.NewPassword(createPassword);

            if (result)
            {
                toastService.ShowSuccess("Password has been updated successfully!");
                navigation.NavigateTo("/login");
            }
            else
            {
                toastService.ShowError("Error occurred while setting new password.");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"An error occurred: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void TogglePasswordVisibility()
    {
        if (passwordInputType == "password")
        {
            passwordInputType = "text";

            eyeIcon = "fas fa-eye-slash";
        }
        else
        {
            passwordInputType = "password";

            eyeIcon = "fas fa-eye";
        }
    }
}

